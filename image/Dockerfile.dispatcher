FROM artifactory.cloud.ingka-system.cn/ccoecn-docker-virtual/golang:1.21.3 As builder

WORKDIR /go/src/app

ARG GO_ARCH
ARG GIT_ACCESS_TOKEN_USR
ARG GIT_ACCESS_TOKEN_PWD
ENV GO_ARCH $GO_ARCH
ENV GIT_ACCESS_TOKEN_USR $GIT_ACCESS_TOKEN_USR
ENV GIT_ACCESS_TOKEN_PWD $GIT_ACCESS_TOKEN_PWD
COPY src ./src
RUN echo "machine github.com login ${GIT_ACCESS_TOKEN_USR} password ${GIT_ACCESS_TOKEN_PWD}">> ~/.netrc; chmod 600 ~/.netrc
RUN cd ./src; go env -w GOPRIVATE=github.com/ingka-group-digital/*; go mod download; \
    GOOS=linux CGO_ENABLED=0 GOARCH=amd64 go build -o /go/src/app/bin/dispatcher ./dispatcher/

FROM artifactory.cloud.ingka-system.cn/ccoecn-docker-virtual/ubuntu:18.04

ARG MNS_URL
ARG ACCESS_KEY
ARG SECRET_KEY
ARG REGION 
ARG REPO_ORG_NAME
ARG REPO_ORG_URL 
ARG TF_VER 
ARG TF_PLATFORM 
ARG IMAGE_RETRIEVE_USERNAME
ARG IMAGE_RETRIEVE_PWD 
ARG IMAGE_RETRIEVE_SERVER
ARG LOCAL_MODE
ARG GITENT_TK
ARG GITHUB_TK
ARG SLS_ENC_KEY
ARG ALLEN_DB_HOST
ARG ALLEN_DB_PORT
ARG ALLEN_DB_USR
ARG ALLEN_DB_PWD
ARG ALLEN_DB_DBNAME
ARG ALLEN_DB_TABLE
ARG CTX_USERNAME
ARG CTX_PWD
# ARG ARM_CLIENT_ID
# ARG ARM_CLIENT_SECRET
# ARG ARM_SUBSCRIPTION_ID
# ARG ARM_TENANT_ID
# ARG ARM_ENVIRONMENT
# ARG ARM_RESOURCE_PROVIDER_REGISTRATIONS

ENV TF_VAR_IMAGE_RETRIEVE_USERNAME=$IMAGE_RETRIEVE_USERNAME
ENV TF_VAR_IMAGE_RETRIEVE_PWD=$IMAGE_RETRIEVE_PWD
ENV TF_VAR_IMAGE_RETRIEVE_SERVER=$IMAGE_RETRIEVE_SERVER
ENV TF_VAR_MNS_URL=$MNS_URL 
ENV REPO_ORG_URL=$REPO_ORG_URL
ENV REPO_ORG_NAME=$REPO_ORG_NAME
ENV ALICLOUD_ACCESS_KEY=$ACCESS_KEY
ENV ALICLOUD_SECRET_KEY=$SECRET_KEY
ENV ALICLOUD_REGION=$REGION 
ENV SLS_GITENT_TK=$GITENT_TK
ENV SLS_GITHUB_TK=$GITHUB_TK
ENV SLS_ENC_KEY=$SLS_ENC_KEY
ENV ALLEN_DB_HOST=$ALLEN_DB_HOST
ENV ALLEN_DB_PORT=$ALLEN_DB_PORT
ENV ALLEN_DB_USR=$ALLEN_DB_USR
ENV ALLEN_DB_PWD=$ALLEN_DB_PWD
ENV ALLEN_DB_DBNAME=$ALLEN_DB_DBNAME
ENV ALLEN_DB_TABLE=$ALLEN_DB_TABLE
ENV contextusername=$CTX_USERNAME
ENV contextpassword=$CTX_PWD

RUN apt-get update -y -q && apt-get upgrade -y -q && \
    apt-get install -y \
        curl \
        unzip \
        jq \
        gettext-base \
        libc6 \
        vim \
        wget && \ 
    rm -rf /var/lib/apt/lists/* && \
    apt-get clean

WORKDIR /go/bin

RUN wget https://releases.hashicorp.com/terraform/${TF_VER}/terraform_${TF_VER}_linux_${TF_PLATFORM}.zip && \ 
    unzip terraform_${TF_VER}_linux_${TF_PLATFORM}.zip && cp ./terraform /usr/local/bin/ && rm ./terraform && \
    rm ./terraform_${TF_VER}_linux_${TF_PLATFORM}.zip; echo 200 > /tmp/healthy

COPY --from=builder /go/src/app/bin/dispatcher ./dispatcher
COPY src/dispatcher/*.sh ./
COPY runner/ ./runner/
COPY cache/ ./cache/
COPY module/ ./module/
COPY template/ ./template/

# RUN mkdir /go/bin/tf_plugin_cache && export TF_PLUGIN_CACHE_DIR="/go/bin/tf_plugin_cache" && cd ./runner && \
#     terraform init && cp ./.terraform.lock.hcl /go/bin/tf_plugin_cache/.terraform.lock.hcl && \
#     rm -rf ./.terraform && rm ./.terraform.lock.hcl

EXPOSE 61201
