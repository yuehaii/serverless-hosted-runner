name: CICD Tenant Registration CD
on:
  workflow_dispatch:
    inputs:
      env:
        type: choice
        description: 'deploy to Production/Dev/Test environment'
        required: true
        default: 'Test'
        options: 
        - Prod
        - Test
        - Dev
      version:
        type: string
        description: 'image version'
        required: false 
      registry:
        description: 'image registry'
        default: 'Lazy'
        type: choice
        options:
        - Lazy
        - Allen 
        - Mix 
        required: false 
      provider:
        description: 'cloud provider'
        default: 'ali'
        type: choice
        options:
        - ali
        - azure 
        - gcp 
        required: false 
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  ALICLOUD_REGION: ${{ vars.ALICLOUD_REGION }}
  TF_VAR_IMAGE_RETRIEVE_USERNAME: ${{ secrets.TF_VAR_IMAGE_RETRIEVE_USERNAME }}
  TF_VAR_IMAGE_RETRIEVE_PWD: ${{ secrets.TF_VAR_IMAGE_RETRIEVE_PWD }}
  TF_VAR_IMAGE_RETRIEVE_SERVER: ${{ vars.TF_VAR_IMAGE_RETRIEVE_SERVER }}
  SLS_ENC_KEY: ${{ secrets.SLS_ENC_KEY }}
  SLS_GITENT_TK: ${{ secrets.SLS_GITENT_TK }}
  SLS_GITHUB_TK: ${{ secrets.SLS_GITHUB_TK }}
  CTX_LOG_LEVEL: ${{ vars.CTX_LOG_LEVEL_CICD }}
  SLS_CLOUD_PR: ${{ inputs.provider }}
jobs:
  deploy:
    runs-on: serverless-hosted-runner
    steps:      
    - name: Checkout Repo
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 #4.17
    - uses: ./ 
      name: "Install Dependency"  
      with:
        op: "install_dependency"
    - uses: ./ 
      name: "Lazy Install to Prod"  
      if: ${{ (inputs.env == 'Prod') && (inputs.registry == 'Lazy') }}
      with:
        op: "lazy_install"  
        reg: "cicd"  
      env: 
        DISPATCHER_VSWITCH_ID: ${{ vars.CICD_DISPATCHER_VSWITCH_ID }}
        DISPATCHER_SG_ID: ${{ vars.CICD_DISPATCHER_SG_ID }}
        ALICLOUD_ACCESS_KEY: ${{ secrets.CICD_ALICLOUD_ACCESS_KEY }}
        ALICLOUD_SECRET_KEY: ${{ secrets.CICD_ALICLOUD_SECRET_KEY }}
        SLS_CD_ENV: ${{ inputs.env }}
        BUILD_IMAGE_VER: ${{ inputs.version }}
    - uses: ./ 
      name: "Lazy Install to Test"
      if: ${{ (inputs.env != 'Prod') && (inputs.registry == 'Lazy') }}
      with:
        op: "lazy_install"  
        reg: "cicd"  
      env:
        DISPATCHER_VSWITCH_ID: ${{ vars.TEST_DISPATCHER_VSWITCH_ID }}
        DISPATCHER_SG_ID: ${{ vars.TEST_DISPATCHER_SG_ID }}
        ALICLOUD_ACCESS_KEY: ${{ secrets.TEST_ALICLOUD_ACCESS_KEY }}
        ALICLOUD_SECRET_KEY: ${{ secrets.TEST_ALICLOUD_SECRET_KEY }}
        SLS_CD_ENV: ${{ inputs.env }}
        BUILD_IMAGE_VER: ${{ inputs.version }} 
    - uses: ./ 
      name: "Allen Install to Prod"  
      if: ${{ (inputs.env == 'Prod') && (inputs.registry == 'Allen') }}
      with:
        op: "allen_install"  
        reg: "allen"
      env: 
        DISPATCHER_VSWITCH_ID: ${{ vars.CICD_DISPATCHER_VSWITCH_ID }}
        DISPATCHER_SG_ID: ${{ vars.CICD_DISPATCHER_SG_ID }}
        ALICLOUD_ACCESS_KEY: ${{ secrets.CICD_ALICLOUD_ACCESS_KEY }}
        ALICLOUD_SECRET_KEY: ${{ secrets.CICD_ALICLOUD_SECRET_KEY }}
        SLS_CD_ENV: ${{ inputs.env }}
        BUILD_IMAGE_VER: ${{ inputs.version }}
    - uses: ./ 
      name: "Mix Install to Prod"  
      if: ${{ (inputs.env == 'Prod') && (inputs.registry == 'Mix') }}
      with:
        op: "mix_install" 
        reg: "cicd"
      env: 
        DISPATCHER_VSWITCH_ID: ${{ vars.CICD_DISPATCHER_VSWITCH_ID }}
        DISPATCHER_SG_ID: ${{ vars.CICD_DISPATCHER_SG_ID }}
        ALICLOUD_ACCESS_KEY: ${{ secrets.CICD_ALICLOUD_ACCESS_KEY }}
        ALICLOUD_SECRET_KEY: ${{ secrets.CICD_ALICLOUD_SECRET_KEY }}
        SLS_CD_ENV: ${{ inputs.env }}
        BUILD_IMAGE_VER: ${{ inputs.version }}